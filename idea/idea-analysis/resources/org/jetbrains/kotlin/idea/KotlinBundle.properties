fix.insert.delegation.call=Insert ''{0}()'' call
fix.introduce.non.null.assertion=Add non-null asserted (!!) call
fix.remove.non.null.assertion=Remove unnecessary non-null assertion (!!)
fix.import=Import
fix.change.return.type=Change type

action.add.import.chooser.title=Imports

goto.super.chooser.function.title=Choose super function
goto.super.chooser.property.title=Choose super property
goto.super.chooser.class.title=Choose super class or interface

inspection.unused.receiver.parameter=Receiver parameter is never used
fix.unused.receiver.parameter.remove=Remove redundant receiver parameter

options.color.attribute.descriptor.annotation=Annotation
options.color.attribute.descriptor.builtin.annotation=Keywords//Modifier
options.color.attribute.descriptor.builtin.keyword.val=Keywords//'val'
options.color.attribute.descriptor.builtin.keyword.var=Keywords//'var'
options.color.attribute.descriptor.builtin.keyword=Keywords//Keyword
options.color.attribute.descriptor.string.escape=String//Escape in string and template braces
options.color.attribute.descriptor.closure.braces=Braces and Operators//Lambda expression braces and arrow
options.color.attribute.descriptor.safe.access=Braces and Operators//Safe access dot
options.color.attribute.descriptor.quest=Braces and Operators//Type nullability marker
options.color.attribute.descriptor.exclexcl=Braces and Operators//Non-null assertion
options.color.attribute.descriptor.arrow=Braces and Operators//Arrow
options.color.attribute.descriptor.colon=Braces and Operators//Colon
options.color.attribute.descriptor.double.colon=Braces and Operators//Double colon
options.color.attribute.descriptor.kdoc.comment=Comments//KDoc//KDoc comment
options.color.attribute.descriptor.kdoc.tag=Comments//KDoc//KDoc tag
options.color.attribute.descriptor.kdoc.value=Comments//KDoc//Link in KDoc tag
options.color.attribute.descriptor.object=Classes and Interfaces//Object
options.color.attribute.descriptor.enumEntry=Classes and Interfaces//Enum entry
options.color.attribute.descriptor.typeAlias=Classes and Interfaces//Type alias
options.color.attribute.descriptor.var=Properties and Variables//Var (mutable variable, parameter or property)
options.color.attribute.descriptor.local.variable=Properties and Variables//Local variable or value
options.color.attribute.descriptor.captured.variable=Properties and Variables//Variables and values captured in a closure
options.color.attribute.descriptor.instance.property=Properties and Variables//Instance property
options.color.attribute.descriptor.instance.property.custom.property.declaration=Properties and Variables//Instance property with custom property declarations
options.color.attribute.descriptor.package.property=Properties and Variables//Package-level property
options.color.attribute.descriptor.package.property.custom.property.declaration=Properties and Variables//Package-level property with custom property declarations
options.color.attribute.descriptor.field=Properties and Variables//Backing field variable
options.color.attribute.descriptor.extension.property=Properties and Variables//Extension property
options.color.attribute.descriptor.synthetic.extension.property=Properties and Variables//Synthetic extension property
options.color.attribute.descriptor.dynamic.property=Properties and Variables//Dynamic property
options.color.attribute.descriptor.android.extensions.property=Properties and Variables//Android Extensions synthetic properties
options.color.attribute.descriptor.it=Parameters//Lambda expression default parameter
options.color.attribute.descriptor.fun=Functions//Function declaration
options.color.attribute.descriptor.fun.call=Functions//Function call
options.color.attribute.descriptor.dynamic.fun.call=Functions//Dynamic function call
options.color.attribute.descriptor.package.fun.call=Functions//Package-level function call
options.color.attribute.descriptor.suspend.fun.call=Functions//Suspend function call
options.color.attribute.descriptor.extension.fun.call=Functions//Extension function call
options.color.attribute.descriptor.constructor.call=Functions//Constructor call
options.color.attribute.descriptor.variable.as.function.call=Properties and Variables//Variable as function call
options.color.attribute.descriptor.variable.as.function.like.call=Properties and Variables//Variable as function-like call
options.color.attribute.descriptor.smart.cast=Smart-casts//Smart-cast value
options.color.attribute.descriptor.smart.constant=Smart-casts//Smart constant
options.color.attribute.descriptor.smart.cast.receiver=Smart-casts//Smart-cast implicit receiver
options.color.attribute.descriptor.label=Label

fix.create.from.usage.family=Create from usage
fix.create.from.usage.local.variable=Create local variable ''{0}''

overridden.marker.implementations.multiple=Has implementations
overridden.marker.implementation=Is implemented in <br/>
overridden.marker.overrides.multiple=Is overridden in subclasses
overridden.marker.overrides=Is overridden in <br/>

overridden.marker.implementations.choose.implementation.title=Choose Implementation of {0}
overridden.marker.implementations.choose.implementation.find.usages=Overriding properties of {0}
overridden.marker.overrides.choose.implementation.title=Choose Super Implementation of {0}
overridden.marker.overrides.choose.implementation.find.usages=Super Implementations of {0}

remove.expression = Remove ''{0}''
unwrap.expression = Unwrap ''{0}''
remove.else = Remove else in ''{0}''
unwrap.else = Unwrap else in ''{0}''

override.declaration.x.in.y={0} in {1}
override.declaration.x.implements.y={0} in {1} implements {2} in {3}.
override.declaration.x.overrides.y.in.class.list={0} overrides declarations in the following classes/interfaces: {1} Do you want to {2} the base declarations?

override.declaration.unused.overriding.methods.title=Unused Overriding Members
override.declaration.unused.overriding.methods.description=There are unused members that override methods you delete.
override.declaration.choose.to.delete=Choose the ones you want to be deleted.
override.declaration.member=Member
override.declaration.delete.multiple.parameters={0} is a part of method hierarchy. Do you want to delete multiple parameters?

find.declaration.implementing.methods.checkbox=&Implementing functions
find.declaration.overriding.methods.checkbox=Over&riding functions
find.declaration.implementing.properties.checkbox=&Implementing properties
find.declaration.overriding.properties.checkbox=Over&riding properties
find.declaration.property.readers.checkbox=Readers
find.declaration.property.writers.checkbox=Writers
find.declaration.include.overloaded.methods.checkbox=Include o&verloaded functions and extensions
find.declaration.functions.usages.checkbox=Usages of &functions
find.declaration.properties.usages.checkbox=Usages of &properties
find.declaration.constructor.usages.checkbox=Usages of &constructor
find.declaration.derived.classes.checkbox=&Derived classes
find.declaration.derived.interfaces.checkbox=Derived &interfaces

hierarchy.legend.member.is.defined.in.class=Member is defined in the class
hierarchy.legend.member.defined.in.superclass=Member is not defined in the class but defined in superclass
hierarchy.legend.member.should.be.defined=Member should be defined since the class is not abstract

intention.suppress.family=Suppress Warnings
intention.suppress.text=Suppress ''{0}'' for {1} {2}

kotlin.compiler.option.generate.no.warnings=Report compiler &warnings
kotlin.compiler.option.additional.command.line.parameters=&Additional command line parameters:
kotlin.compiler.option.enable.new.inference.in.ide=Enable new type inference algorithm for IDE analysis

kotlin.compiler.jvm.option.panel.title=Kotlin to JVM

kotlin.compiler.js.option.panel.title=Kotlin to JavaScript
kotlin.compiler.js.option.generate.sourcemaps=Generate &source maps
kotlin.compiler.js.option.output.prefix=File to &prepend to generated code:
kotlin.compiler.js.option.output.postfix=File to append to generated c&ode:
kotlin.compiler.js.option.output.copy.files=&Copy library runtime fileskotlin.compiler.js.option.output.copy.dir=O&utput directory for library &runtime files:

# Android Lint
android.klint.inspections.group.name=Android Lint for Kotlin

# Scratch Files
scratch.run.button=Run Scratch File
scratch.run.from.here.button=Run Scratch From Here
scratch.stop.button=Stop scratch execution
scratch.clear.button=Clear results
scratch.module.combobox=Use classpath of module
scratch.is.repl.checkbox=Use REPL
scratch.is.repl.checkbox.description=Runs in the Kotlin REPL. Executes only the new expressions added to the end of the scratch
scratch.is.interactive.checkbox=Interactive mode
scratch.is.interactive.checkbox.description=Runs after you stop typing for {0} seconds
scratch.make.before.run.checkbox=Make module before Run
scratch.make.before.run.checkbox.description=Make module {0} before running scratch. Only compiled code is reachable from this scope
scratch.inlay.output.mode=Inlay output mode\n\nThe output is shown in the code editor right next to the expression. Well suited for a short single-line output.
scratch.side.panel.output.mode.description=Side panel output mode
scratch.side.panel.output.mode=Side panel output mode\n\nThe output is shown in the separate panel. Useful if the output is long or multi-line.
scratch.inlay.output.mode.description=Inlay output mode

# Code insight
dialog.import.on.paste.title3=Select Import to Remove
copy.paste.reference.notification=<html>{0} {0, choice, 1#import was|2#imports were} added<p><span><a href='show'>Review Added Imports...</a></span></html>
